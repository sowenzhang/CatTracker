// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using CatTrackerML.Model;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Vision;

namespace CatTrackerML.ConsoleApp
{
    public static class ModelBuilder
    {
        // Create MLContext to be shared across the model creation workflow objects 
        // Set a random seed for repeatable/deterministic results across multiple trainings.
        private static readonly MLContext MlContext = new MLContext(1);

        public static void CreateModel(string trainDataFilePath, string modelFilePath)
        {
            // Load Data
            var trainingDataView = MlContext.Data.LoadFromTextFile<ModelInput>(
                trainDataFilePath,
                hasHeader: true,
                separatorChar: '\t',
                allowQuoting: true);

            // Build training pipeline
            var trainingPipeline = BuildTrainingPipeline();

            // Evaluate quality of Model
            Evaluate(trainingDataView, trainingPipeline);

            // Train Model
            var mlModel = TrainModel(trainingDataView, trainingPipeline);

            // Save model
            SaveModel(mlModel, modelFilePath, trainingDataView.Schema);
        }

        public static IEstimator<ITransformer> BuildTrainingPipeline()
        {
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = MlContext.Transforms.Conversion.MapValueToKey("Label", "Label")
                .Append(MlContext.Transforms.LoadRawImageBytes("ImageSource_featurized", null, "ImageSource"))
                .Append(MlContext.Transforms.CopyColumns("Features", "ImageSource_featurized"));

            // Set the training algorithm 
            var trainer = MlContext.MulticlassClassification.Trainers.ImageClassification(
                    new ImageClassificationTrainer.Options
                    {
                        LabelColumnName = "Label", 
                        FeatureColumnName = "Features",
                        Arch = ImageClassificationTrainer.Architecture.ResnetV2101,
                        Epoch = 1000,
                        EarlyStoppingCriteria = new ImageClassificationTrainer.EarlyStopping(patience:40)
                    })
                .Append(MlContext.Transforms.Conversion.MapKeyToValue("PredictedLabel", "PredictedLabel"));
            var trainingPipeline = dataProcessPipeline.Append(trainer);
            return trainingPipeline;
        }

        public static ITransformer TrainModel(IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            Console.WriteLine("=============== Training  model ===============");

            var model = trainingPipeline.Fit(trainingDataView);

            Console.WriteLine("=============== End of training process ===============");
            return model;
        }

        private static void Evaluate(IDataView trainingDataView,
            IEstimator<ITransformer> trainingPipeline)
        {
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
            var crossValidationResults =
                MlContext.MulticlassClassification.CrossValidate(trainingDataView, trainingPipeline);
            PrintMulticlassClassificationFoldsAverageMetrics(crossValidationResults);
        }

        private static void SaveModel(ITransformer mlModel, string modelRelativePath,
            DataViewSchema modelInputSchema)
        {
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine("=============== Saving the model  ===============");
            MlContext.Model.Save(mlModel, modelInputSchema, GetAbsolutePath(modelRelativePath));
            Console.WriteLine("The model is saved to {0}", GetAbsolutePath(modelRelativePath));
        }

        public static string GetAbsolutePath(string relativePath)
        {
            var dataRoot = new FileInfo(typeof(Program).Assembly.Location);
            Debug.Assert(dataRoot.Directory != null, "dataRoot.Directory != null");
            var assemblyFolderPath = dataRoot.Directory.FullName;

            var fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }

        public static void PrintMulticlassClassificationMetrics(MulticlassClassificationMetrics metrics)
        {
            Console.WriteLine("************************************************************");
            Console.WriteLine("*    Metrics for multi-class classification model   ");
            Console.WriteLine("*-----------------------------------------------------------");
            Console.WriteLine(
                $"    MacroAccuracy = {metrics.MacroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine(
                $"    MicroAccuracy = {metrics.MicroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine($"    LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better");
            for (var i = 0; i < metrics.PerClassLogLoss.Count; i++)
                Console.WriteLine(
                    $"    LogLoss for class {i + 1} = {metrics.PerClassLogLoss[i]:0.####}, the closer to 0, the better");
            Console.WriteLine("************************************************************");
        }

        public static void PrintMulticlassClassificationFoldsAverageMetrics(
            IEnumerable<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>> crossValResults)
        {
            var metricsInMultipleFolds = crossValResults.Select(r => r.Metrics).ToArray();

            var microAccuracyValues = metricsInMultipleFolds.Select(m => m.MicroAccuracy);
            var accuracyValues = microAccuracyValues as double[] ?? microAccuracyValues.ToArray();
            var microAccuracyAverage = accuracyValues.Average();
            var microAccuraciesStdDeviation = CalculateStandardDeviation(accuracyValues);
            var microAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(accuracyValues);

            var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.MacroAccuracy);
            var macroAccuracyAverage = accuracyValues.Average();
            var macroAccuraciesStdDeviation = CalculateStandardDeviation(accuracyValues);
            var macroAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(macroAccuracyValues);

            var logLossValues = metricsInMultipleFolds.Select(m => m.LogLoss).ToArray();
            var logLossAverage = logLossValues.Average();
            var logLossStdDeviation = CalculateStandardDeviation(logLossValues);
            var logLossConfidenceInterval95 = CalculateConfidenceInterval95(logLossValues);

            var logLossReductionValues = metricsInMultipleFolds.Select(m => m.LogLossReduction).ToArray();
            var logLossReductionAverage = logLossReductionValues.Average();
            var logLossReductionStdDeviation = CalculateStandardDeviation(logLossReductionValues);
            var logLossReductionConfidenceInterval95 = CalculateConfidenceInterval95(logLossReductionValues);

            Console.WriteLine(
                "*************************************************************************************************************");
            Console.WriteLine("*       Metrics for Multi-class Classification model      ");
            Console.WriteLine(
                "*------------------------------------------------------------------------------------------------------------");
            Console.WriteLine(
                $"*       Average MicroAccuracy:    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:#.###})");
            Console.WriteLine(
                $"*       Average MacroAccuracy:    {macroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###})");
            Console.WriteLine(
                $"*       Average LogLoss:          {logLossAverage:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidence Interval 95%: ({logLossConfidenceInterval95:#.###})");
            Console.WriteLine(
                $"*       Average LogLossReduction: {logLossReductionAverage:#.###}  - Standard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval 95%: ({logLossReductionConfidenceInterval95:#.###})");
            Console.WriteLine(
                "*************************************************************************************************************");
        }

        public static double CalculateStandardDeviation(IEnumerable<double> values)
        {
            var enumerable = values as double[] ?? values.ToArray();
            var average = enumerable.Average();
            var sumOfSquaresOfDifferences = enumerable.Select(val => (val - average) * (val - average)).Sum();
            var standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (enumerable.Count() - 1));
            return standardDeviation;
        }

        public static double CalculateConfidenceInterval95(IEnumerable<double> values)
        {
            var enumerable = values as double[] ?? values.ToArray();
            var confidenceInterval95 = 1.96 * CalculateStandardDeviation(enumerable) / Math.Sqrt(enumerable.Count() - 1);
            return confidenceInterval95;
        }
    }
}